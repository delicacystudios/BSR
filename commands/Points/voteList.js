const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Points = require('../../DB/points');

module.exports = {
    name: 'votelist',
    aliases: ['vl', 'leaderboard'],
    description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤',
    category: 'Points',
    usage: [],

    run: async (client, message, args) => {
        try {
            const topUsers = await Points.find().sort({ Point: -1 }).limit(10);
            if (topUsers.length === 0) {
                return message.channel.send('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏–Ω—Ç–∞—Ö.');
            }

            const leaderboard = topUsers.map((user, index) => `**${index + 1}.** <@${user.UserID}> - **${user.Point}** –ø–æ–∏–Ω—Ç–æ–≤`).join('\n');

            const embed = new EmbedBuilder()
                .setTitle('üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏–Ω—Ç–∞–º')
                .setColor(client.config.message.colors.main)
                .setDescription(`–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n` + leaderboard)
                .setFooter({ text: `${client.config.message.footer}` })
                .setTimestamp();

            const row = new ActionRowBuilder();

            // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            topUsers.forEach((user, index) => {
                row.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`vote_${user.UserID}`)
                        .setLabel(`${index + 1}`)
                        .setStyle(ButtonStyle.Primary)
                );
            });

            const msg = await message.channel.send({ embeds: [embed], components: [row] });

            // –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const filter = i => i.customId.startsWith('vote_') && !i.user.bot;
            const collector = msg.createMessageComponentCollector({ filter, time: 60000 });

            collector.on('collect', async interaction => {
                const voterId = interaction.user.id;
                const targetId = interaction.customId.split('_')[1];

                if (voterId === targetId) {
                    return interaction.reply({ content: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!', ephemeral: true });
                }

                const userVote = await Points.findOne({ UserID: targetId });

                if (!userVote) {
                    return interaction.reply({ content: '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', ephemeral: true });
                }

                const lastVotedTimestamp = userVote.lastVoted || 0;
                const now = Date.now();
                const twelveHours = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                if (now - lastVotedTimestamp < twelveHours) {
                    const timeLeft = twelveHours - (now - lastVotedTimestamp);
                    const hoursLeft = Math.floor(timeLeft / (60 * 60 * 1000));
                    const minutesLeft = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞—è –∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
                    const updatedRow = new ActionRowBuilder();
                    topUsers.forEach(user => {
                        updatedRow.addComponents(
                            new ButtonBuilder()
                                .setCustomId(`vote_${user.UserID}`)
                                .setLabel(`${user.UserID === targetId ? '‚ùå' : `${user.Point}`}`)
                                .setStyle(user.UserID === targetId ? ButtonStyle.Danger : ButtonStyle.Primary)
                                .setDisabled(true) // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
                        );
                    });

                    await msg.edit({ components: [updatedRow] });

                    return interaction.reply({
                        content: `–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –°–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ **${hoursLeft} —á. ${minutesLeft} –º–∏–Ω.**`,
                        ephemeral: true
                    });
                }

                userVote.Point += 1;
                userVote.lastVoted = now;
                await userVote.save();

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞—è –∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
                const updatedRow = new ActionRowBuilder();
                topUsers.forEach(user => {
                    updatedRow.addComponents(
                        new ButtonBuilder()
                            .setCustomId(`vote_${user.UserID}`)
                            .setLabel(`${user.UserID === targetId ? '‚ùå' : `${user.Point}`}`)
                            .setStyle(user.UserID === targetId ? ButtonStyle.Danger : ButtonStyle.Primary)
                            .setDisabled(true) // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
                    );
                });

                await msg.edit({ components: [updatedRow] });

                await interaction.reply({ content: `–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ <@${targetId}>! –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ **${userVote.Point}** –≥–æ–ª–æ—Å–æ–≤.`, ephemeral: true });
            });

        } catch (err) {
            console.error(err);
            message.channel.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤.');
        }
    }
};